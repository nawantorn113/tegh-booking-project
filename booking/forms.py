# booking/forms.py
from django import forms
from django.contrib.auth.forms import PasswordChangeForm
from .models import Booking, Profile, Room
from django.contrib.auth.models import User
from django.urls import reverse_lazy # 1. üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° Import ‡∏ô‡∏µ‡πâ üü¢

# --- ‚ùå ‡∏•‡∏ö Import ‡∏Ç‡∏≠‡∏á dal ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚ùå ---
# from dal_select2.widgets import ModelSelect2Multiple 
# from dal import autocomplete
# --- --------------------------------- ---

class BookingForm(forms.ModelForm):
    
    class Meta:
        model = Booking
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ fields ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Model ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        fields = [
            'room', 'title', 'chairman', 'department', 'start_time',
            'end_time', 'participant_count', 
            'participants', # <-- 1. ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            'external_participants', # <-- 2. ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á
            'presentation_file',
            'additional_requests', 'attachment', 'description', 'additional_notes', 'status',
        ]
        labels = {
            'room': '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
            'title': '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
            'chairman': '‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
            'department': '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
            'start_time': '‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
            'end_time': '‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
            'participant_count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)',
            'participants': '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)',
            'external_participants': '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å)',
            'presentation_file': '‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
            'additional_requests': '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡πÅ‡∏ü, ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©)',
            'attachment': '‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
            'description': '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡∏ß‡∏≤‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
            'additional_notes': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
            'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
        }
        help_texts = {
            'participants': '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏´‡∏£‡∏∑‡∏≠ username ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)',
            'external_participants': '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ç‡∏Å/‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (,) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà',
            'presentation_file': '‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠ (PDF, PPT, Word, Excel)',
            'attachment': '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á',
            'participant_count': '‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏´‡πâ‡∏≠‡∏á',
        }
        widgets = {
            'room': forms.HiddenInput(),
            'status': forms.HiddenInput(),
            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local', 'class':'form-control'}),
            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local', 'class':'form-control'}),

            # --- 2. üü¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Widget: ‡πÉ‡∏ä‡πâ SelectMultiple ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ üü¢ ---
            # ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° 'class' ‡πÅ‡∏•‡∏∞ 'data-url' ‡πÉ‡∏´‡πâ JS ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
            'participants': forms.SelectMultiple(
                attrs={
                    'class': 'form-control select2-ajax-users', # üëà Class ‡πÉ‡∏´‡∏°‡πà
                    'data-url': reverse_lazy('user-autocomplete'), # üëà ‡∏ö‡∏≠‡∏Å JS ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô
                    'data-theme': 'bootstrap-5',
                }
            ),
            # --- -------------------------------------------- ---

            'external_participants': forms.Textarea(
                attrs={'rows': 3, 'class':'form-control', 'placeholder': '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ (PTT)\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á (SCG)'}
            ),
            'description': forms.Textarea(attrs={'rows': 3, 'class':'form-control'}),
            'additional_requests': forms.Textarea(attrs={'rows': 2, 'class':'form-control'}),
            'additional_notes': forms.Textarea(attrs={'rows': 2, 'class':'form-control'}),
            'presentation_file': forms.ClearableFileInput(attrs={'class':'form-control'}),
            'attachment': forms.ClearableFileInput(attrs={'class':'form-control'}),
            'title': forms.TextInput(attrs={'class':'form-control'}),
            'chairman': forms.TextInput(attrs={'class':'form-control'}),
            'department': forms.TextInput(attrs={'class':'form-control', 'readonly': True}),
            'participant_count': forms.NumberInput(attrs={'min': '1', 'class':'form-control'}),
        }

    # (‡πÇ‡∏Ñ‡πâ‡∏î __init__ ... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        if user and 'department' in self.fields:
             try:
                 profile = Profile.objects.get(user=user)
                 if profile.department:
                     self.fields['department'].initial = profile.department
                     self.fields['department'].widget.attrs['readonly'] = True
                     self.fields['department'].widget.attrs['class'] = 'form-control bg-light'
             except Profile.DoesNotExist:
                 pass


class ProfileForm(forms.ModelForm):
     first_name = forms.CharField(label='‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á', max_length=150, required=False)
     last_name = forms.CharField(label='‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', max_length=150, required=False)
     email = forms.EmailField(label='‡∏≠‡∏µ‡πÄ‡∏°‡∏•', required=False)
     class Meta:
        model = Profile
        fields = ['first_name', 'last_name', 'email', 'department', 'phone', 'avatar']
        labels = { 'department': '‡πÅ‡∏ú‡∏ô‡∏Å/‡∏ù‡πà‡∏≤‡∏¢', 'phone': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', 'avatar': '‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå', }
        widgets = {
            'phone': forms.TextInput(attrs={'placeholder': '‡πÄ‡∏ä‡πà‡∏ô 081-XXX-XXXX'}),
            'first_name': forms.TextInput(attrs={'class':'form-control'}),
            'last_name': forms.TextInput(attrs={'class':'form-control'}),
            'email': forms.EmailInput(attrs={'class':'form-control'}),
            'department': forms.TextInput(attrs={'class':'form-control'}),
            'avatar': forms.ClearableFileInput(attrs={'class':'form-control'}),
        }
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
         if self.instance and self.instance.user:
             self.fields['first_name'].initial = self.instance.user.first_name
             self.fields['last_name'].initial = self.instance.user.last_name
             self.fields['email'].initial = self.instance.user.email
     def save(self, commit=True):
         profile = super().save(commit=False)
         user = profile.user
         user.first_name = self.cleaned_data['first_name']
         user.last_name = self.cleaned_data['last_name']
         user.email = self.cleaned_data['email']
         if commit:
             user.save()
             profile.save()
         return profile

class CustomPasswordChangeForm(PasswordChangeForm):
     old_password = forms.CharField( label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤", strip=False, widget=forms.PasswordInput(attrs={'autocomplete': 'current-password', 'autofocus': True, 'class':'form-control'}), )
     new_password1 = forms.CharField( label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", widget=forms.PasswordInput(attrs={'autocomplete': 'new-password', 'class':'form-control'}), strip=False, )
     new_password2 = forms.CharField( label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", strip=False, widget=forms.PasswordInput(attrs={'autocomplete': 'new-password', 'class':'form-control'}), )

class RoomForm(forms.ModelForm):
    class Meta:
        model = Room
        fields = ['name', 'building', 'floor', 'capacity', 'equipment_in_room', 'image']
        labels = {
            'name': '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°', 'building': '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', 'floor': '‡∏ä‡∏±‡πâ‡∏ô',
            'capacity': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ (‡∏Ñ‡∏ô)', 'equipment_in_room': '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á',
            'image': '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
        }
        help_texts = {
            'equipment_in_room': '‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå, ‡πÑ‡∏ß‡∏ó‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î',
            'image': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û .jpg, .png', 'capacity': '‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        }
        widgets = {
            'name': forms.TextInput(attrs={'placeholder': '‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° O1-1', 'class':'form-control'}),
            'building': forms.TextInput(attrs={'placeholder': '‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô 1, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ R&D', 'class':'form-control'}),
            'floor': forms.TextInput(attrs={'placeholder': '‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏±‡πâ‡∏ô 1, ‡∏ä‡∏±‡πâ‡∏ô 5', 'class':'form-control'}),
            'capacity': forms.NumberInput(attrs={'min': '1', 'class':'form-control'}),
            'equipment_in_room': forms.Textarea(attrs={'rows': 5, 'placeholder': '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå\n‡πÑ‡∏ß‡∏ó‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î\n‡∏ä‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü', 'class':'form-control'}),
            'image': forms.ClearableFileInput(attrs={'accept': 'image/*', 'class':'form-control'}),
        }