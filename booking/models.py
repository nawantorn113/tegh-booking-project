# booking/models.py
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django import forms

class Room(models.Model):
    name = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°", max_length=100, unique=True)
    building = models.CharField("‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£", max_length=50, blank=True, null=True)
    floor = models.CharField("‡∏ä‡∏±‡πâ‡∏ô", max_length=20, blank=True, null=True)
    capacity = models.PositiveIntegerField("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ (‡∏Ñ‡∏ô)", default=1)
    equipment_in_room = models.TextField(
        "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á",
        blank=True, null=True,
        help_text="‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á"
    )
    image = models.ImageField(
        "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
        upload_to='room_images/',
        blank=True, null=True
    )

    class Meta:
        ordering = ['building', 'floor', 'name']
        verbose_name = "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
        verbose_name_plural = "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"

    def __str__(self):
        return self.name

class Booking(models.Model):
    room = models.ForeignKey(Room, verbose_name="‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°", on_delete=models.CASCADE, related_name='bookings')
    booked_by = models.ForeignKey(User, verbose_name="‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á", on_delete=models.CASCADE, related_name='booking')
    title = models.CharField("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°", max_length=200)
    description = models.TextField("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡∏ß‡∏≤‡∏£‡∏∞", blank=True, null=True)
    start_time = models.DateTimeField("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", default=timezone.now)
    end_time = models.DateTimeField("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", default=timezone.now)
    participant_count = models.PositiveIntegerField("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)", default=1)
    participants = models.ManyToManyField(
        User,
        verbose_name="‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)", # <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        related_name='participating_bookings',
        blank=True
    )

    # --- üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° Field ‡∏ô‡∏µ‡πâ üü¢ ---
    external_participants = models.TextField(
        "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å)",
        blank=True, null=True,
        help_text="‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ç‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)"
    )
    # --- --------------------- ---

    STATUS_CHOICES = [
        ('PENDING', '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'), ('APPROVED', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß'),
        ('REJECTED', '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'), ('CANCELLED', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'),
    ]
    status = models.CharField("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", max_length=10, choices=STATUS_CHOICES, default='PENDING')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    chairman = models.CharField("‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°", max_length=150, blank=True, null=True)
    department = models.CharField("‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á", max_length=100, blank=True, null=True)
    presentation_file = models.FileField("‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠", upload_to='presentation_files/', blank=True, null=True, help_text="‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠ (PDF, PPT, Word, Excel)")
    additional_requests = models.TextField("‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", blank=True, null=True, help_text="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡πÅ‡∏ü, ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©")
    attachment = models.FileField("‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ", upload_to='booking_attachments/', blank=True, null=True, help_text="‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
    additional_notes = models.TextField("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", blank=True, null=True)

    class Meta:
        ordering = ['-start_time']
        verbose_name = "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"
        verbose_name_plural = "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"

    def __str__(self):
        start_str = self.start_time.strftime('%d/%m/%y %H:%M') if self.start_time else "N/A"
        room_name = self.room.name if hasattr(self, 'room') and self.room else "N/A"
        return f"{self.title} ({room_name}) - {start_str}"

    def clean(self):
        super().clean()
        if self.start_time and self.end_time and self.end_time <= self.start_time:
            raise forms.ValidationError({'end_time': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'})
        check_conflict = False
        if self.pk is None: check_conflict = True
        else:
            if hasattr(self, '_Booking__original_start_time') and self.start_time != self.__original_start_time: check_conflict = True
            if hasattr(self, '_Booking__original_end_time') and self.end_time != self.__original_end_time: check_conflict = True
            if hasattr(self, '_Booking__original_room') and self.room != self.__original_room: check_conflict = True
        if check_conflict and self.room and self.start_time and self.end_time:
            conflicts = Booking.objects.filter(
                room=self.room, start_time__lt=self.end_time, end_time__gt=self.start_time
            ).exclude(pk=self.pk).exclude(status__in=['REJECTED', 'CANCELLED'])
            if conflicts.exists():
                conflict_details = conflicts.first()
                start_h = conflict_details.start_time.strftime("%H:%M") if conflict_details.start_time else "N/A"
                end_h = conflict_details.end_time.strftime("%H:%M") if conflict_details.end_time else "N/A"
                raise forms.ValidationError(
                    f'‡∏´‡πâ‡∏≠‡∏á "{self.room.name}" ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ '
                    f'‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á "{conflict_details.title}" '
                    f'‡πÄ‡∏ß‡∏•‡∏≤ {start_h} - {end_h} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'
                )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.pk:
            self.__original_start_time = self.start_time
            self.__original_end_time = self.end_time
            self.__original_room = self.room
        else:
            self.__original_start_time = None
            self.__original_end_time = None
            initial_room_id = kwargs.get('initial', {}).get('room') if 'initial' in kwargs else None
            self.__original_room = Room.objects.get(pk=initial_room_id) if initial_room_id else None


class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    department = models.CharField("‡πÅ‡∏ú‡∏ô‡∏Å/‡∏ù‡πà‡∏≤‡∏¢", max_length=100, blank=True, null=True)
    phone = models.CharField("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", max_length=20, blank=True, null=True)
    avatar = models.ImageField("‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", upload_to='avatars/', default='avatars/default.png', blank=True, null=True)
    class Meta:
        verbose_name = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        verbose_name_plural = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
    def __str__(self):
        return f"Profile ‡∏Ç‡∏≠‡∏á {self.user.username}"

class LoginHistory(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    timestamp = models.DateTimeField("‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", auto_now_add=True)
    ACTION_CHOICES = [('LOGIN', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'), ('LOGOUT', '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö')]
    action = models.CharField("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥", max_length=10, choices=ACTION_CHOICES)
    ip_address = models.GenericIPAddressField("IP Address", null=True, blank=True)
    class Meta:
        ordering = ['-timestamp']
        verbose_name = "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        verbose_name_plural = "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
    def __str__(self):
        action_display = dict(self.ACTION_CHOICES).get(self.action, self.action)
        time_display = self.timestamp.strftime('%Y-%m-%d %H:%M') if self.timestamp else "N/A"
        return f"{self.user.username} - {action_display} at {time_display}"